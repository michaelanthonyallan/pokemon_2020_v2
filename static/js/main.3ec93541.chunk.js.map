{"version":3,"sources":["pokemon/Pokemon.js","pokemonResults/PokemonResults.js","Evolution/Evolution.js","EvolutionResults/EvolutionResults.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","plural","useState","number","setFlavorTextNumber","shiny","setShine","numOfTypes","Fragment","className","pokemon","name","id","types","src","img","height","width","alt","onClick","text","flavor_text","version","numberOfText","Math","floor","random","length","PokemonResults","setTypes","setImg","shinyImg","setShinyImg","numberOfTypes","setNumberOfTypes","useEffect","map","type","push","join","getTypes","sprites","front_default","front_shiny","allFlavorText","Evolution","getPokemon","EvolutionResults","evolutions","i","key","App","setPokemon","species","setSpecies","flavor","setFlavor","pokemonEvolutionData","setPokemonEvolutionData","a","randomNumber","error","console","log","term","Axios","get","response","data","getSpecies","flavor_text_entries","filter","language","getEvolutions","evolution_chain","url","evoChain","evoData","chain","numberOfEvolutions","species_name","evolves_to","hasOwnProperty","fulfilled","forEach","element","evolution","all","then","spread","args","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3ec93541.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './pokemon.css'\r\n\r\n\r\nexport default function Pokemon(props) {\r\n    const [number, setFlavorTextNumber] = useState(0)\r\n    const [shiny, setShine] = useState(true)\r\n\r\n    let plural\r\n    if(props.numOfTypes > 1){\r\n        plural = true\r\n    }\r\n\r\n    function makeShiny(){\r\n        if(shiny === true){\r\n        setShine(false)\r\n        } else{\r\n            setShine(true)\r\n        }\r\n    }\r\n\r\n    function changeFlavorText(){\r\n        let numberOfText = (Math.floor(Math.random() * Math.floor(props.text.length)))\r\n        setFlavorTextNumber(numberOfText)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            \r\n            <h1 className=\"capitalize\">Name: {props.pokemon.name}</h1>\r\n            <h3>Pok√©dex Entry: {props.pokemon.id}</h3>\r\n            <h2 className=\"capitalize\">{plural ? 'Types: ' : 'Type: '} {props.types}</h2>\r\n            \r\n\r\n            <img src={shiny ? props.img : props.shiny} height=\"200\" width=\"200\" alt={props.pokemon.name} />\r\n            <br></br>\r\n            <br></br>\r\n\r\n\r\n            <button onClick={makeShiny}>{shiny ? \"Make Shiny\" : \"Make Normal\"}</button>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <p className=\"flavor-text\">{props.text[`${number}`].flavor_text}</p>\r\n            <p className=\"capitalize\">pokemon {props.text[`${number}`].version.name}</p>\r\n            \r\n<br></br>\r\n            <button onClick={changeFlavorText}>Change Flavor Text!</button>\r\n            \r\n\r\n        </React.Fragment>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Pokemon from '../pokemon/Pokemon'\r\n\r\nexport default function PokemonResults(props) {\r\n    const [types, setTypes] = useState(\"\")\r\n    const [img, setImg] = useState(\"\");\r\n    const [shinyImg, setShinyImg] = useState(\"\")\r\n    const [numberOfTypes, setNumberOfTypes] = useState(\"\")\r\n\r\n    function getImg() {\r\n        if (props.pokemon.sprites) {\r\n            setImg(props.pokemon.sprites.front_default)\r\n            setShinyImg(props.pokemon.sprites.front_shiny)\r\n        }\r\n    }\r\n\r\n\r\n    function getTypes() {\r\n        let types = []\r\n        if (props.pokemon.types) {\r\n            props.pokemon.types.map(type => {\r\n                return types.push(type.type.name)\r\n            })\r\n\r\n            setTypes(types.join(', '));\r\n            setNumberOfTypes(types.length)\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        getTypes()\r\n        getImg()\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"PokemonResults\">\r\n            {img && types && <Pokemon pokemon={props.pokemon}\r\n                types={types} numOfTypes={numberOfTypes} \r\n                img={img} shiny={shinyImg} text={props.allFlavorText}/>}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Evolution(props) {\r\n\r\n\r\n    function getPokemon(name){\r\n        props.getPokemon(name)\r\n    }\r\n\r\n    return (\r\n        <div className=\"evolution\">\r\n            <h4 className=\"capitalize\">{props.name}</h4>\r\n            <p>{props.id}</p>\r\n            <img onClick={() => getPokemon(props.name)}src={props.img} alt={props.name} />\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react'\r\n// import Pokemon from '../pokemon/Pokemon';\r\nimport \"./evolutionResults.css\"\r\nimport Evolution from '../Evolution/Evolution'\r\n\r\n\r\nfunction EvolutionResults(props) {\r\n\r\n    let evolutions = props.evolutions\r\n\r\n    return (\r\n        <div>\r\n        {evolutions.length > 1 && (\r\n        <div className=\"evo-results\">\r\n                {evolutions.map((pokemon, i) => {\r\n                    return (<div className=\"evolution\" key={i}>\r\n                        <Evolution getPokemon={props.getPokemon} name={pokemon.name} img={pokemon.sprites.front_default}/>\r\n                    </div>)\r\n                })}\r\n                </div>\r\n        )}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n} export default EvolutionResults","import React, { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios'\nimport PokemonResults from './pokemonResults/PokemonResults';\nimport EvolutionResults from './EvolutionResults/EvolutionResults';\n\nfunction App() {\n  const [pokemon, setPokemon] = useState(\"\")\n  const [species, setSpecies] = useState(\"\")\n  const [flavor, setFlavor] = useState(\"\")\n  const [pokemonEvolutionData, setPokemonEvolutionData] = useState(\"\")\n\n  async function randomPokemon() {\n    let randomNumber = (Math.floor(Math.random() * Math.floor(809)))\n    try {\n      if(randomNumber > 0 ){\n      getPokemon(randomNumber)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async function getPokemon(term) {\n    try {\n      const response = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${term}/`)\n      const pokemon = response.data\n      setPokemon(pokemon)\n      getSpecies(term)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async function getSpecies(term) {\n    try {\n      const response = await Axios.get(`https://pokeapi.co/api/v2/pokemon-species/${term}`)\n      setSpecies(response.data)\n      setFlavor(response.data.flavor_text_entries.filter(text => text.language.name === \"en\"))\n      getEvolutions(response.data.evolution_chain.url)\n    } catch (error) {\n      console.log(error)\n    }\n\n  }\n\n  async function getEvolutions(term) {\n    try {\n      \n      const response = await Axios.get(term)\n\n      let evoChain = [];\n      let evoData = response.data.chain;\n\n      do {\n        let numberOfEvolutions = evoData[\"evolves_to\"].length;\n\n        if (numberOfEvolutions > 1) {\n          for (let i = 1; i < numberOfEvolutions; i++) {\n            evoChain.push({\n              species_name: evoData.evolves_to[i].species.name,\n            });\n          }\n        }\n\n        evoChain.push({\n          species_name: evoData.species.name,\n        });\n\n        evoData = evoData[\"evolves_to\"][0];\n      } while (!!evoData && evoData.hasOwnProperty(\"evolves_to\"));\n\n      let evolutions = []\n      let fulfilled = []\n      let pokemonEvolutionData = []\n\n      evoChain.forEach(element => {\n\n        let evolution = Axios.get(`https://pokeapi.co/api/v2/pokemon/${element.species_name}`)\n        evolutions.push(evolution)\n\n      })\n\n      await Axios.all(evolutions).then(\n        (Axios.spread((...args) => {\n          fulfilled.push(args)\n          fulfilled[0].forEach(element => {\n            pokemonEvolutionData.push(element.data)\n          });\n        })))\n        setPokemonEvolutionData(pokemonEvolutionData)\n\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <br></br>\n        <br></br>\n        <br></br>\n        <button onClick={randomPokemon}>Get Random Pokemon</button>\n\n        {pokemon && species &&(\n        <div>\n\n        <PokemonResults pokemon={pokemon} allFlavorText={flavor} evolutions={pokemonEvolutionData}/>\n\n        {/* <button onClick={getEvolutions}>Get Evolutions</button> */}\n\n        </div>)}\n\n        <br></br>\n        <br></br>\n\n        {pokemon && species && flavor && pokemonEvolutionData.length > 1 && (\n          <div>\n            <h3>Evolutions</h3>\n            <EvolutionResults evolutions={pokemonEvolutionData} getPokemon={getPokemon}/>\n          </div>\n        )}\n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}